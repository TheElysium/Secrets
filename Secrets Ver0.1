#Modules
from cryptography.fernet import Fernet 
import os
from PIL import Image
from colorama import init
from colorama import Fore



# Key used to cypher / decypher images. Generated with Fernet module
key = b'2gvS_ez-cKjMJ4W5wH8ptumqeb4rd7gzQWyLW4jcmOc='
f = Fernet(key)

# Create "cyphered" and "decyphered" directories if they not exist
try:
    os.makedirs("cyphered")
except:
    pass

try:
    os.makedirs("decyphered")
except:
    pass



def cypher(image_name):
    try:
        path = "decyphered/" + image_name   
        image = open(path, "rb")                                    #Open image with "rb" because we want to read the bytecode of the image
        image = image.read()                
        image = f.encrypt(image)                                    #Cypher with the key "f"
        path = "cyphered/" + image_name
        cyphered_image = open(path, "wb")                           # "wb" is for "write bytecode", because the "image" type is bytecode
        cyphered_image.write(image)
        cyphered_image.close()
        print(Fore.BLUE + "Image cyphered !" + Fore.RESET)
    except Exception as e:
        print(Fore.RED + "This image is not in the 'decyphered' folder." + Fore.RESET)
        print(e)



def decypher(image_name, bool):
    try:
        path = "cyphered/" + image_name
        cyphered_image = open(path, "rb" )
        cyphered_image = cyphered_image.read()
        cyphered_image = f.decrypt(cyphered_image)                  # Decypher with the key "f"
        
        if bool == True:                                            # The bool allow the program to know if the decyphered image must be saved or not.
                                                                
            path = "decyphered/" + image_name
            crypt = open(path, "wb")
            crypt.write(cyphered_image)
            crypt.close()
            print(Fore.BLUE + "Image decyphered !" + Fore.RESET)
        
        else:
            path = "cyphered/" + "2" + image_name                   # We are obliged to save momentarily decyphered image. We add a "2" before "image_name" because "image_name" alone already exists
            crypt = open(path, "wb")                                # "wb" is for "write bytecode"
            crypt.write(cyphered_image)
            crypt.close()
            return path


    except Exception as e:
        print(Fore.RED + "This image is not in the 'cyphered' folder !" + Fore.RESET)
        print(e)



def showImages():
    files = os.listdir("cyphered/")                                                         #List every elements on the cyphered folder (equivalent of "ls").
    for name in files:
        print(files)
    
    try:
        image_name = input("\nWhat is the name of the image you want to see ?\n>>> ")
        image_name = decypher(image_name, False)                                            #The parameter "bool" is False because we don't want to save the decyphered image.
        image = Image.open(image_name)                                                      #Open the image with the Image function from PIL module
        image.show()                                                                
        os.remove(image_name)                                                               #Delete decyphered image
    except:
        pass








print("Made by Elysium\nSECRETS is a image cypher / decypher and container\n\n\n")
print("\n\n"\
"           -----------------------  Welcome  ----------------------\n\n"
"           ███████╗███████╗ ██████╗██████╗ ███████╗████████╗███████╗\n"\
"           ██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝╚══██╔══╝██╔════╝\n"\
"           ███████╗█████╗  ██║     ██████╔╝█████╗     ██║   ███████╗\n"\
"           ╚════██║██╔══╝  ██║     ██╔══██╗██╔══╝     ██║   ╚════██║\n"\
"           ███████║███████╗╚██████╗██║  ██║███████╗   ██║   ███████║\n"\
"           ╚══════╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚══════╝\n\n"\
"           -----------------------  Ver 0.1  ----------------------\n\n\n"    )
while True:
    choice = int(input(Fore.YELLOW + "\n\n"\
        "1- Cypher an image\n"\
        "2- Decypher an image\n"\
        "3- Show cyphered images\n"\
        ">>> "+Fore.RESET))

    if choice == 1:
        image_name = input("\nWhat is the name of the picture? (Make sure it is in the folder 'decyphered')\n>>> ")
        cypher(image_name)
    
    elif choice == 2:
        image_name = input("\nWhat is the name of the picture? (Make sure it is in the folder 'cyphered')\n>>> ")             
        decypher(image_name, True)                                                                                          #The parameter "bool" is True because we want to save the decyphered image
    
    elif choice == 3:
        showImages()
    
    else:
        continue
        
